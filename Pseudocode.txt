TYPE vector IS STRUCTURE DEFINED
	x IS DOUBLE Var
	y IS DOUBLE Var
	n IS STRING Var
END vector TYPE

FUNCTION main:
Start
Initialize variable of type Vector “vec1”
Initialize variable of type Vector “vec2”
Initialize constant variable of type int “k” = 10
Initialize variable of type Vector “sum”
Initialize variable of type Vector “differ”
Initialize variable of type Vector “s_mult”
Initialize variable of type int “s_prod”
Initialize variable of type double “mag”

Call get_vector (arguments: vec1)
Call get_vector (arguments: vec2)

Call calc_sum (arguments: vec1, vec2, sum)

Call print_vector (arguments: name1, vec1)
Call print_vector (arguments: name2, vec2)
Call print_vector (arguments: sum)

Call calc_difference (arguments: vec1, vec2, differ)
Call print_vector (arguments: differ)

Call scalar_mult (arguments: vec1, k, s_mult)
Call print_vector (arguments: s_mult)

Call scalar_prod (arguments: vec1, vec2) and set equal to s_prod
Print “Scalar Product =  “ s_prod

Call magnitude (arguments: vec1) and set equal to mag
Print “Magnitude of Vector 1 =  “ mag

End

FUNCTION get_vector (parameters: v)
Start
	Display message “Please enter a value for the vector’s first dimension”
Prompt user to enter a value for member “x”
Display message “Please enter a value for the vector’s second dimension”
Prompt user to enter a value for member “y”
Display message “Please enter the name of the vector”
Prompt user to enter a value for member “n”
End

FUNCTION calc_sum (parameters: v1, v2, s)
Start
s.x = v1.x + v2.x
s.y = v1.y + v2.y
End

FUNCTION print_vector (parameters: v1, v2)
Start
Print v1.n “: “ print v1.x, print v1.y
End

FUNCTION calc_difference (parameters: v1, v2, d)
Start
d.x = v1.x – v2.x
d.y = v1.y – v2.y
End

FUNCTION scalar_mult (parameters: v, k, m)
Start
m.x = k* v.x
m.y = k* v.y
End

FUNCTION scalar_prod (parameters: v1,  v2)
Start
Return (v1.x * v2.x) + (v1.y * v2.y)
End

FUNCTION magnitude (parameters: v)
Start
Return (x^2 + y^2) ^ (1/2)
End